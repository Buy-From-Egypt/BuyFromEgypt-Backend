generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              String   @id @default(uuid())
  name                String
  email               String   @unique
  password            String
  phoneNumber         String   @unique
  nationalId          String   @unique
  country             String
  taxId               String?
  role                String
  type                String
  active              Boolean  @default(true)
  profileImage        String?
  registrationNumber  String?
  industrial          String?
  industrySector      String?
  commercial          String?
  address             String?
  posts               Post[]          @relation("UserPosts")
  comments            Comment[]       @relation("UserComments")
  certifications      Certification[] @relation("UserCertifications")
  orders              Order[]         @relation("UserOrders")
  products            Product[]       @relation("UserProducts")
  messagesSent        Message[]       @relation("SentMessages")
  messagesReceived    Message[]       @relation("ReceivedMessages")
  categories          Category[]      @relation("UserCategories")
}

model Post {
  postId              String   @id @default(uuid())
  content             String
  userId              String
  approvedBy          String?
  status              String
  user                User     @relation("UserPosts", fields: [userId], references: [userId])
  comments            Comment[]
}

model Comment {
  commentId           String   @id @default(uuid())
  commentText         String
  postId              String
  userId              String
  post                Post     @relation(fields: [postId], references: [postId])
  user                User     @relation("UserComments", fields: [userId], references: [userId])
}

model Certification {
  certificationId     String   @id @default(uuid())
  entityId            String
  entityType          String
  title               String
  description         String?
  issuedBy            String
  issueDate           DateTime
  expiryDate          DateTime?
  isVerified          Boolean  @default(false)
  userId              String?
  user                User?    @relation("UserCertifications", fields: [userId], references: [userId])
  products            Product[] @relation("ProductCertifications")
}

model Order {
  orderId             String   @id @default(uuid())
  status              String
  importerId          String
  exporterId          String
  user                User     @relation("UserOrders", fields: [importerId], references: [userId])
  products            Product[] @relation("OrderProducts")
  orderDetails        String?
  totalPrice          Float
  currencyCode        String
  deliveryDate        DateTime?
  quantityProduct     Int
}

model Product {
  productId           String   @id @default(uuid())
  name                String
  description         String?
  price               Float
  currencyCode        String
  images              String[]
  categoryId          String
  userId              String
  user                User     @relation("UserProducts", fields: [userId], references: [userId])
  approvedBy          String?
  certifications      Certification[] @relation("ProductCertifications")
  orders              Order[]          @relation("OrderProducts")
  categories          Category[]       @relation("CategoryProducts")
}

model Message {
  messageId           String   @id @default(uuid())
  senderId            String
  receiverId          String
  content             String
  messageType         String
  sender              User     @relation("SentMessages", fields: [senderId], references: [userId])
  receiver            User     @relation("ReceivedMessages", fields: [receiverId], references: [userId])
}

model Category {
  categoryId          String   @id @default(uuid())
  name                String
  description         String?
  userId              String
  user                User     @relation("UserCategories", fields: [userId], references: [userId])
  products            Product[] @relation("CategoryProducts")
}
