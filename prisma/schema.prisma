generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                   String                    @id @default(uuid())
  name                     String
  email                    String                    @unique
  password                 String
  phoneNumber              String                    @unique
  nationalId               String                    @unique
  country                  String
  taxId                    String                    @unique
  age                      Int
  role                     RoleEnum                  @default(USER)
  type                     TypeEnum
  active                   Boolean                   @default(false)
  profileImage             String?
  about                    String?                   @db.Text
  registrationNumber       String?                   @unique
  industrial               String?
  industrySector           String?
  commercial               String?
  address                  String?                   @db.Text
  otpCode                  String?
  otpMethod                String?
  otpExpiry                DateTime?
  emailVerified            Boolean                   @default(false)
  isOnline                 Boolean                   @default(false)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  posts                    Post[]                    @relation("UserPosts")
  comments                 Comment[]                 @relation("UserComments")
  certifications           Certification[]           @relation("UserCertifications")
  orders                   Order[]                   @relation("UserOrders")
  products                 Product[]                 @relation("UserProducts")
  approvedProducts         Product[]                 @relation("ApprovedProducts")
  messagesSent             Message[]                 @relation("SentMessages")
  messagesReceived         Message[]                 @relation("ReceivedMessages")
  categories               Category[]                @relation("UserCategories")
  followers                Follower[]                @relation("FollowedUsers")
  following                Follower[]                @relation("FollowingUsers")
  likedComments            CommentLike[]             @relation("UserLikes")
  otps                     Otp[]
  conversationParticipants ConversationParticipant[]
  savedPosts               Post[]                    @relation("UserSavedPosts")
  savedProducts            Product[]                 @relation("UserSavedProducts")
  socialLinks              SocialMedia[]             @relation(name: "UserSocialLinks")
  socialLinkId             String?
  ratings                  Rating[]
  searchHistory            SearchHistory[]
  Product                  Product[]
  recommendationSystem     UserPreference[]

  @@index([createdAt])
  @@index([role, active])
}

model Otp {
  id         String   @id @default(uuid())
  userId     String
  otpCode    String
  identifier String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId])
}

model Follower {
  followId    String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("FollowingUsers", fields: [followerId], references: [userId])
  following   User     @relation("FollowedUsers", fields: [followingId], references: [userId])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  postId       String      @id @default(uuid())
  title        String
  content      String
  cloudFolder  String
  userId       String
  user         User        @relation("UserPosts", fields: [userId], references: [userId])
  comments     Comment[]
  products     Product[]   @relation("PostProducts")
  images       PostImage[] @relation("PostImages")
  savedByUsers User[]      @relation("UserSavedPosts")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rating       Float?      @default(0.0)
  reviewCount  Int         @default(0)
  Rating       Rating[]

  @@index([userId])
}

model Comment {
  commentId String        @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime      @default(now())
  likes     CommentLike[]

  post Post @relation(fields: [postId], references: [postId])
  user User @relation("UserComments", fields: [userId], references: [userId])

  @@index([postId])
  @@index([userId])
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  isDislike Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserLikes", fields: [userId], references: [userId])
  comment   Comment  @relation(fields: [commentId], references: [commentId])

  @@unique([userId, commentId])
}

model Certification {
  certificationId String    @id @default(uuid())
  entityId        String
  entityType      String
  title           String
  description     String?   @db.Text
  issuedBy        String
  issueDate       DateTime
  expiryDate      DateTime?
  isVerified      Boolean   @default(false)
  userId          String?
  user            User?     @relation("UserCertifications", fields: [userId], references: [userId])
  products        Product[] @relation("ProductCertifications")

  @@index([userId])
  @@index([isVerified])
}

model Order {
  orderId         String    @id @default(uuid())
  status          String
  importerId      String
  exporterId      String
  importer        User      @relation("UserOrders", fields: [importerId], references: [userId])
  products        Product[] @relation("OrderProducts")
  orderDetails    String?   @db.Text
  totalPrice      Float
  currencyCode    String
  deliveryDate    DateTime?
  quantityProduct Int
  createdAt       DateTime  @default(now())

  @@index([importerId])
  @@index([exporterId])
  @@index([status])
  @@index([createdAt])
}

model Product {
  productId      String          @id @default(uuid())
  name           String
  slug           String          @unique @db.VarChar(255)
  description    String?         @db.Text
  price          Float
  currencyCode   String
  active         Boolean         @default(false)
  available      Boolean         @default(true)
  rating         Float?          @default(0.0)
  reviewCount    Int             @default(0)
  cloudFolder    String
  ownerId        String
  owner          User            @relation("UserProducts", fields: [ownerId], references: [userId])
  categoryId     String
  category       Category        @relation("CategoryProducts", fields: [categoryId], references: [categoryId])
  approvedById   String?
  approvedBy     User?           @relation("ApprovedProducts", fields: [approvedById], references: [userId])
  approvedAt     DateTime?
  certifications Certification[] @relation("ProductCertifications")
  orders         Order[]         @relation("OrderProducts")
  posts          Post[]          @relation("PostProducts")
  images         ProductImage[]  @relation("ProductImages")
  ratings        Rating[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  User           User?           @relation(fields: [userUserId], references: [userId])
  userUserId     String?
  savedByUsers   User[]          @relation("UserSavedProducts")

  @@index([ownerId])
  @@index([categoryId])
  @@index([price])
  @@index([approvedById])
  @@index([active])
  @@index([createdAt])
  @@index([slug])
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [postId])
  productId String?
  product   Product? @relation(fields: [productId], references: [productId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@unique([userId, productId])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean @default(false)
  productId String
  product   Product @relation("ProductImages", fields: [productId], references: [productId])

  @@index([productId])
}

model PostImage {
  id     String @id @default(uuid())
  url    String
  postId String
  post   Post   @relation("PostImages", fields: [postId], references: [postId])

  @@index([postId])
}

model Conversation {
  id           String                    @id @default(uuid())
  name         String?
  type         ConversationType
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  @@index([createdAt])
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [userId])
  userId         String
  joinedAt       DateTime     @default(now())

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  messageId      String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation("SentMessages", fields: [senderId], references: [userId])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [userId])
  receiverId     String
  content        String       @db.Text
  messageType    MessageType
  createdAt      DateTime     @default(now())
  seen           Boolean      @default(false)
  delivered      Boolean      @default(false)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Notification {
  id          String   @id @default(uuid())
  type        String
  message     String
  recipientId String
  senderId    String
  postId      String?
  commentId   String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Category {
  categoryId  String    @id @default(uuid())
  name        String
  description String?   @db.Text
  userId      String
  user        User      @relation("UserCategories", fields: [userId], references: [userId])
  products    Product[] @relation("CategoryProducts")
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([name])
}

model SocialMedia {
  id        String   @id @default(uuid())
  userId    String
  platform  String
  url       String?
  handle    String?
  user      User     @relation(name: "UserSocialLinks", fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([platform])
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  query     String
  type      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model UserPreference {
  id             String   @id @default(uuid())
  userId         String   @unique
  industries     String[]
  supplierType   String?
  orderQuantity  String?
  shippingMethod String?
  receiveAlerts  Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [userId])
}

enum RoleEnum {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TypeEnum {
  EXPORTER
  IMPORTER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}

enum ConversationType {
  PRIVATE
  GROUP
}
