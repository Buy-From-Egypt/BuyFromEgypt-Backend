generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             String          @id @default(uuid())
  name               String
  email              String          @unique
  password           String
  phoneNumber        String          @unique
  nationalId         String?         @unique
  country            String
  taxId              String          @unique
  role               RoleEnum        @default(USER)
  type               TypeEnum
  active             Boolean         @default(false)
  profileImage       String?
  registrationNumber String?
  industrial         String?
  industrySector     String?
  commercial         String?
  address            String?         @db.Text
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  posts              Post[]          @relation("UserPosts")
  comments           Comment[]       @relation("UserComments")
  certifications     Certification[] @relation("UserCertifications")
  orders             Order[]         @relation("UserOrders")
  products           Product[]       @relation("UserProducts")
  approvedProducts   Product[]       @relation("ApprovedProducts")
  messagesSent       Message[]       @relation("SentMessages")
  messagesReceived   Message[]       @relation("ReceivedMessages")
  categories         Category[]      @relation("UserCategories")
  followers          Follower[]      @relation("FollowedUsers")
  following          Follower[]      @relation("FollowingUsers")
  likedPosts         PostLike[]      @relation("UserLikes")

  @@index([createdAt])
  @@index([role, active])
}

model Follower {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("FollowingUsers", fields: [followerId], references: [userId])
  following   User     @relation("FollowedUsers", fields: [followingId], references: [userId])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String      @id @default(uuid())
  title     String
  content   String
  status    String
  createdAt DateTime    @default(now())
  userId    String
  user      User        @relation("UserPosts", fields: [userId], references: [userId])
  comments  Comment[]
  likes     PostLike[]
  products  Product[]   @relation("PostProducts")
  images    PostImage[] @relation("PostImages")

  @@index([userId])
}

model PostLike {
  id           String       @id @default(uuid())
  postId       String
  userId       String
  createdAt    DateTime     @default(now())
  reactionType ReactionType @default(LIKE)

  post Post @relation(fields: [postId], references: [id])
  user User @relation("UserLikes", fields: [userId], references: [userId])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation("UserComments", fields: [userId], references: [userId]) // Define the relationship with User

  @@index([postId]) // Index for postId
  @@index([userId]) // Index for userId
}

model Certification {
  certificationId String    @id @default(uuid())
  entityId        String
  entityType      String
  title           String
  description     String?   @db.Text
  issuedBy        String
  issueDate       DateTime
  expiryDate      DateTime?
  isVerified      Boolean   @default(false)
  userId          String?
  user            User?     @relation("UserCertifications", fields: [userId], references: [userId])
  products        Product[] @relation("ProductCertifications")

  @@index([userId])
  @@index([isVerified])
}

model Order {
  orderId         String    @id @default(uuid())
  status          String
  importerId      String
  exporterId      String
  importer        User      @relation("UserOrders", fields: [importerId], references: [userId])
  products        Product[] @relation("OrderProducts")
  orderDetails    String?   @db.Text
  totalPrice      Float
  currencyCode    String
  deliveryDate    DateTime?
  quantityProduct Int
  createdAt       DateTime  @default(now())

  @@index([importerId])
  @@index([exporterId])
  @@index([status])
  @@index([createdAt])
}

model Product {
  productId      String          @id @default(uuid())
  name           String
  slug           String          @unique @db.VarChar(255)
  description    String?         @db.Text
  price          Float
  currencyCode   String
  active         Boolean         @default(false)
  available      Boolean         @default(true)
  rating         Float?          @default(0.0)
  reviewCount    Int             @default(0)
  cloudFolder    String?
  ownerId        String
  owner          User            @relation("UserProducts", fields: [ownerId], references: [userId])
  categoryId     String?
  category       Category?       @relation("CategoryProducts", fields: [categoryId], references: [categoryId])
  approvedById   String?
  approvedBy     User?           @relation("ApprovedProducts", fields: [approvedById], references: [userId])
  approvedAt     DateTime?
  certifications Certification[] @relation("ProductCertifications")
  orders         Order[]         @relation("OrderProducts")
  posts          Post[]          @relation("PostProducts")
  images         ProductImage[]  @relation("ProductImages")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([ownerId])
  @@index([categoryId])
  @@index([price])
  @@index([approvedById])
  @@index([active])
  @@index([createdAt])
  @@index([slug])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean @default(false)
  productId String
  product   Product @relation("ProductImages", fields: [productId], references: [productId])

  @@index([productId])
}

model PostImage {
  id     String @id @default(uuid())
  url    String
  postId String
  post   Post   @relation("PostImages", fields: [postId], references: [id])

  @@index([postId])
}

model Message {
  messageId   String      @id @default(uuid())
  senderId    String
  receiverId  String
  content     String      @db.Text
  messageType MessageType
  createdAt   DateTime    @default(now())
  sender      User        @relation("SentMessages", fields: [senderId], references: [userId])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [userId])

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Category {
  categoryId  String    @id @default(uuid())
  name        String
  description String?   @db.Text
  userId      String
  user        User      @relation("UserCategories", fields: [userId], references: [userId])
  products    Product[] @relation("CategoryProducts")

  @@index([userId])
  @@index([name])
}

enum RoleEnum {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TypeEnum {
  EXPORTER
  IMPORTER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}
